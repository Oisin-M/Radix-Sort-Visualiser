{"version":3,"sources":["SortingVisualiser/animations.js","SortingVisualiser/SortingVisualiser.jsx","App.js","serviceWorker.js","index.js"],"names":["getLSDAnimations","array","animations","arr","maxNum","Math","max","divisor","buckets","Array","map","i","length","num","floor","push","console","log","concat","apply","radixSortLSD","getLSDAnimations_base","n","n_arr","new_arr","new_num","parseInt","toString","convert_to_base","n_buckets","radixSortLSD_base","SCREEN_HEIGHT","window","screen","height","SortingVisualiser","props","state","this","resetArray","min","random","setState","arrayBars","document","getElementsByClassName","animation","setTimeout","j","barStyle","style","backgroundColor","Row","paddingLeft","Container","fluid","padding","Navbar","bg","expand","Brand","Toggle","aria-controls","href","target","src","width","className","alt","Collapse","id","Nav","Link","onClick","Radix_Sort_LSD_base","Radix_Sort_LSD","value","idx","key","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.873ebd02.chunk.js","sourcesContent":["export function getLSDAnimations(array) {\r\n  const animations = [];\r\n  radixSortLSD(array, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getLSDAnimations_base(n, array) {\r\n  const animations = [];\r\n  radixSortLSD_base(n, array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction radixSortLSD(arr, animations) {\r\n   // Find the max number and multiply it by 10 to get a number\r\n   // with no. of digits of max + 1\r\n   const maxNum = Math.max(...arr) * 10;\r\n   let divisor = 10;\r\n   while (divisor < maxNum) {\r\n      // Create bucket arrays for each of 0-9\r\n      let buckets = [...Array(10)].map(() => []);\r\n      // For each number, get the current significant digit and put it in the respective bucket\r\n      for (let i = 0; i < arr.length; i++) {\r\n         let num=arr[i];\r\n         buckets[Math.floor((num % divisor) / (divisor / 10))].push(num);\r\n      }\r\n      console.log(buckets);\r\n      // Reconstruct the array by concatinating all sub arrays\r\n      arr = [].concat.apply([], buckets);\r\n      // Move to the next significant digit\r\n      animations.push(arr); //push the list sorted by last digit\r\n      divisor *= 10;\r\n   }\r\n   return arr;\r\n}\r\n\r\nfunction radixSortLSD_base(n, arr, animations) {\r\n  let n_arr=convert_to_base(n, arr);\r\n   // Find the max number and multiply it by 10 to get a number\r\n   // with no. of digits of max + 1\r\n   const maxNum = Math.max(...n_arr) * 10;\r\n   let divisor = 10;\r\n   console.log(divisor);\r\n   while (divisor < maxNum) {\r\n      // Create bucket arrays for each of 0-9\r\n      let n_buckets = [...Array(10)].map(() => []);\r\n      let buckets = [...Array(10)].map(() => []);\r\n      // For each number, get the current significant digit and put it in the respective bucket\r\n      for (let i = 0; i < n_arr.length; i++) {\r\n        let num = n_arr[i];\r\n        console.log(num);\r\n         n_buckets[Math.floor((num % divisor) / (divisor / 10))].push(num);\r\n         buckets[Math.floor((num % divisor) / (divisor / 10))].push(arr[i]);\r\n      }\r\n      console.log(n_buckets);\r\n      console.log(buckets);\r\n      // Reconstruct the array by concatinating all sub arrays\r\n      arr = [].concat.apply([], buckets);\r\n      n_arr = [].concat.apply([], n_buckets);\r\n      // Move to the next significant digit\r\n      animations.push(arr); //push the list sorted by last digit\r\n      divisor *= 10;\r\n      console.log(divisor);\r\n   }\r\n   return arr;\r\n}\r\n\r\nfunction convert_to_base(n, arr) {\r\n  const new_arr = [];\r\n  for (let num of arr) {\r\n    let new_num=parseInt(num.toString(n));\r\n    new_arr.push(new_num);\r\n  }\r\n  return new_arr;\r\n}\r\n","import React from 'react';\r\nimport {getLSDAnimations, getLSDAnimations_base} from './animations.js';\r\nimport './SortingVisualiser.css';\r\nimport {Container, Row, Navbar, Nav, NavDropdown, Button} from 'react-bootstrap';\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\nconst MAX_SIZE = 1500;\r\nconst SCREEN_HEIGHT = (window.screen.height-150)/2000;\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, MAX_SIZE));\r\n    }\r\n    this.setState({array});\r\n    console.log(array);\r\n    console.log(MAX_SIZE);\r\n  }\r\n\r\n  Radix_Sort_LSD() {\r\n    const animations = getLSDAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const animation = animations[i];\r\n      setTimeout(() => {\r\n      for (let j = 0; j < animation.length; j++){\r\n        setTimeout(() => {\r\n        const barStyle = arrayBars[j].style;\r\n        barStyle.height=`${animation[j]*SCREEN_HEIGHT}px`;\r\n        barStyle.backgroundColor=SECONDARY_COLOR;\r\n        setTimeout(() => {\r\n          barStyle.backgroundColor=PRIMARY_COLOR;\r\n        }, 20);\r\n      }, (j * 20) * ANIMATION_SPEED_MS);\r\n      }\r\n    }, (i*20*animation.length+1) * ANIMATION_SPEED_MS);\r\n  }\r\n  this.setState(animations[-1]);\r\n  }\r\n\r\n  Radix_Sort_LSD_base(n) {\r\n    const animations = getLSDAnimations_base(n, this.state.array);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const animation = animations[i];\r\n      setTimeout(() => {\r\n      for (let j = 0; j < animation.length; j++){\r\n        setTimeout(() => {\r\n        const barStyle = arrayBars[j].style;\r\n        barStyle.height=`${animation[j]*SCREEN_HEIGHT}px`;\r\n        barStyle.backgroundColor=SECONDARY_COLOR;\r\n        setTimeout(() => {\r\n          barStyle.backgroundColor=PRIMARY_COLOR;\r\n        }, 20);\r\n      }, (j * 20) * ANIMATION_SPEED_MS);\r\n      }\r\n    }, (i*20*animation.length+1) * ANIMATION_SPEED_MS);\r\n  }\r\n  this.setState(animations[-1]);\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <Row style={{paddingLeft: '10px'}}>\r\n      <Container fluid={true} style={{padding: '0px'}}>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand>Radix Sort Visualiser (LSD)</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Brand href=\"http://oisin-morrison.herokuapp.com\" target=\"_blank\">\r\n          <img\r\n            src=\"https://i.imgur.com/NlNqrth.png\"\r\n            width=\"100\"\r\n            height=\"auto\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"React Bootstrap logo\"\r\n          />\r\n        </Navbar.Brand>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"https://www.google.com/\">About</Nav.Link>\r\n          <Container>\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.Radix_Sort_LSD_base(2)}>Binary Radix Sort</button>\r\n          <button onClick={() => this.Radix_Sort_LSD_base(5)}>Quinary Radix Sort</button>\r\n          <button onClick={() => this.Radix_Sort_LSD()}>Decimal Radix Sort</button>\r\n          </Container>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Row className=\"justify-content-center\" style={{width: '100vw'}}>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value*SCREEN_HEIGHT}px`,\r\n            }}></div>\r\n        ))}\r\n        </Row>\r\n\r\n\r\n      </Container>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}